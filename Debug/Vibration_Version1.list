
Vibration_Version1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003324  08003324  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003324  08003324  00013324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800332c  0800332c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000005c  08003390  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003390  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084ee  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015a4  00000000  00000000  000285bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  00029b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000578  00000000  00000000  0002a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001678a  00000000  00000000  0002a808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000094fd  00000000  00000000  00040f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009055f  00000000  00000000  0004a48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000218c  00000000  00000000  000da9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000dcb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003284 	.word	0x08003284

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003284 	.word	0x08003284

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);

int main(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b08e      	sub	sp, #56	; 0x38
 8000590:	af00      	add	r7, sp, #0
  HAL_Init();
 8000592:	f000 fab7 	bl	8000b04 <HAL_Init>
  SystemClock_Config();
 8000596:	f000 f857 	bl	8000648 <SystemClock_Config>
  MX_GPIO_Init();
 800059a:	f000 f8c1 	bl	8000720 <MX_GPIO_Init>
  MX_ADC1_Init();
 800059e:	f000 f8eb 	bl	8000778 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f931 	bl	8000808 <MX_USART2_UART_Init>

  uint16_t vibrationValue = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t vibrationHertz = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	86bb      	strh	r3, [r7, #52]	; 0x34
  char buffer[50];

  while (1) {
	  // Başlat, dönüşümü bekle ve ADC değerini al
	    HAL_ADC_Start(&hadc1);
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <main+0xa8>)
 80005b0:	f000 fb82 	bl	8000cb8 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005b4:	f04f 31ff 	mov.w	r1, #4294967295
 80005b8:	481e      	ldr	r0, [pc, #120]	; (8000634 <main+0xa8>)
 80005ba:	f000 fc31 	bl	8000e20 <HAL_ADC_PollForConversion>
	    vibrationValue = HAL_ADC_GetValue(&hadc1);
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <main+0xa8>)
 80005c0:	f000 fcb9 	bl	8000f36 <HAL_ADC_GetValue>
 80005c4:	4603      	mov	r3, r0
 80005c6:	86fb      	strh	r3, [r7, #54]	; 0x36

	    // ADC değerini Hertz birimine dönüştür
	    vibrationHertz = (vibrationValue + 1) * 25;
 80005c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80005ca:	3301      	adds	r3, #1
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	0092      	lsls	r2, r2, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	461a      	mov	r2, r3
 80005d6:	0091      	lsls	r1, r2, #2
 80005d8:	461a      	mov	r2, r3
 80005da:	460b      	mov	r3, r1
 80005dc:	4413      	add	r3, r2
 80005de:	86bb      	strh	r3, [r7, #52]	; 0x34

	    // Eşik değerini kontrol edin ve mesajı oluşturun
	    if (vibrationHertz >= THRESHOLD) {
 80005e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80005e2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d906      	bls.n	80005f8 <main+0x6c>
	      snprintf(buffer, sizeof(buffer), "Yuksek Titreme Herz: %d Hz\n", vibrationHertz);
 80005ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80005ec:	4638      	mov	r0, r7
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <main+0xac>)
 80005f0:	2132      	movs	r1, #50	; 0x32
 80005f2:	f002 f98f 	bl	8002914 <sniprintf>
 80005f6:	e005      	b.n	8000604 <main+0x78>
	    } else {
	      snprintf(buffer, sizeof(buffer), "Dusuk Titreme Herz: %d Hz\n", vibrationHertz);
 80005f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80005fa:	4638      	mov	r0, r7
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <main+0xb0>)
 80005fe:	2132      	movs	r1, #50	; 0x32
 8000600:	f002 f988 	bl	8002914 <sniprintf>
	    }

	    // Mesajı gönderin
	    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fdea 	bl	80001e0 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	4639      	mov	r1, r7
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <main+0xb4>)
 8000618:	f001 fe07 	bl	800222a <HAL_UART_Transmit>

	    // Yeni bir satır ekleyin
	    HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	2201      	movs	r2, #1
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <main+0xb8>)
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0xb4>)
 8000626:	f001 fe00 	bl	800222a <HAL_UART_Transmit>

	    // 1 saniye bekle
	    HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062e:	f000 fadb 	bl	8000be8 <HAL_Delay>
  while (1) {
 8000632:	e7bc      	b.n	80005ae <main+0x22>
 8000634:	20000078 	.word	0x20000078
 8000638:	0800329c 	.word	0x0800329c
 800063c:	080032b8 	.word	0x080032b8
 8000640:	200000c0 	.word	0x200000c0
 8000644:	080032d4 	.word	0x080032d4

08000648 <SystemClock_Config>:
  }
}

void SystemClock_Config(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 f990 	bl	800297c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd4>)
 8000696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8c4 	bl	8001860 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
    Error_Handler();
 80006de:	f000 f8bd 	bl	800085c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                               RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fb26 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
    Error_Handler();
 800070a:	f000 f8a7 	bl	800085c <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
  // GPIO yapılandırmalarını yap
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  // Örnek olarak PA10'u bir giriş olarak yapılandıralım
  __HAL_RCC_GPIOA_CLK_ENABLE(); // GPIOA'ya güç ver
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_GPIO_Init+0x50>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <MX_GPIO_Init+0x50>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_GPIO_Init+0x50>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_10; // PA10'u seç
 8000750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000754:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Giriş modu
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Dahili pull-up veya pull-down kullanma
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_GPIO_Init+0x54>)
 8000764:	f000 fef8 	bl	8001558 <HAL_GPIO_Init>

  // Başka GPIO pinleri de konfigure etmek isterseniz buraya ekleyin
}
 8000768:	bf00      	nop
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000

08000778 <MX_ADC1_Init>:


static void MX_ADC1_Init(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC1_Init+0x84>)
 800078c:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_ADC1_Init+0x88>)
 800078e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC1_Init+0x84>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC1_Init+0x84>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_ADC1_Init+0x84>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_ADC1_Init+0x84>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC1_Init+0x84>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_ADC1_Init+0x84>)
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <MX_ADC1_Init+0x8c>)
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_ADC1_Init+0x84>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ADC1_Init+0x84>)
 80007be:	2201      	movs	r2, #1
 80007c0:	61da      	str	r2, [r3, #28]

  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_ADC1_Init+0x84>)
 80007c4:	f000 fa34 	bl	8000c30 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x5a>
    Error_Handler();
 80007ce:	f000 f845 	bl	800085c <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007da:	2307      	movs	r3, #7
 80007dc:	60bb      	str	r3, [r7, #8]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_ADC1_Init+0x84>)
 80007e4:	f000 fbb4 	bl	8000f50 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC1_Init+0x7a>
    Error_Handler();
 80007ee:	f000 f835 	bl	800085c <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000078 	.word	0x20000078
 8000800:	40012000 	.word	0x40012000
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f001 fca6 	bl	8002190 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
    Error_Handler();
 800084a:	f000 f807 	bl	800085c <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000c0 	.word	0x200000c0
 8000858:	40004400 	.word	0x40004400

0800085c <Error_Handler>:

void Error_Handler(void) {
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  while (1) {
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x4>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008a2:	2007      	movs	r0, #7
 80008a4:	f000 fe24 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_ADC_MspInit+0x7c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d127      	bne.n	8000926 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_ADC_MspInit+0x80>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <HAL_ADC_MspInit+0x80>)
 80008e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <HAL_ADC_MspInit+0x80>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_ADC_MspInit+0x80>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_ADC_MspInit+0x80>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_ADC_MspInit+0x80>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800090e:	2301      	movs	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_ADC_MspInit+0x84>)
 8000922:	f000 fe19 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40012000 	.word	0x40012000
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <HAL_UART_MspInit+0x84>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12b      	bne.n	80009b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <HAL_UART_MspInit+0x8c>)
 80009b2:	f000 fdd1 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f8c6 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f001 ff9c 	bl	800298c <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20018000 	.word	0x20018000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	20000104 	.word	0x20000104
 8000a88:	20000258 	.word	0x20000258

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab6:	490e      	ldr	r1, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000acc:	4c0b      	ldr	r4, [pc, #44]	; (8000afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ada:	f7ff ffd7 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f001 ff5b 	bl	8002998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fd53 	bl	800058c <main>
  bx  lr    
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000af4:	08003334 	.word	0x08003334
  ldr r2, =_sbss
 8000af8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000afc:	20000254 	.word	0x20000254

08000b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <HAL_Init+0x40>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_Init+0x40>)
 8000b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x40>)
 8000b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 fcdf 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe94 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023c00 	.word	0x40023c00

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fce9 	bl	800153e <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 fcbf 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000108 	.word	0x20000108

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000108 	.word	0x20000108

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e033      	b.n	8000cae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d109      	bne.n	8000c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fe30 	bl	80008b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d118      	bne.n	8000ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c76:	f023 0302 	bic.w	r3, r3, #2
 8000c7a:	f043 0202 	orr.w	r2, r3, #2
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 fa86 	bl	8001194 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9e:	e001      	b.n	8000ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Start+0x1a>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e097      	b.n	8000e02 <HAL_ADC_Start+0x14a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d018      	beq.n	8000d1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <HAL_ADC_Start+0x158>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a45      	ldr	r2, [pc, #276]	; (8000e14 <HAL_ADC_Start+0x15c>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	0c9a      	lsrs	r2, r3, #18
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d0c:	e002      	b.n	8000d14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f9      	bne.n	8000d0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d15f      	bne.n	8000de8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d66:	d106      	bne.n	8000d76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f023 0206 	bic.w	r2, r3, #6
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	645a      	str	r2, [r3, #68]	; 0x44
 8000d74:	e002      	b.n	8000d7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_ADC_Start+0x160>)
 8000d86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10f      	bne.n	8000dbe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d129      	bne.n	8000e00 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	e020      	b.n	8000e00 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <HAL_ADC_Start+0x164>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d11b      	bne.n	8000e00 <HAL_ADC_Start+0x148>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d114      	bne.n	8000e00 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	e00b      	b.n	8000e00 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f043 0210 	orr.w	r2, r3, #16
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000000 	.word	0x20000000
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	40012300 	.word	0x40012300
 8000e1c:	40012000 	.word	0x40012000

08000e20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3c:	d113      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e4c:	d10b      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f043 0220 	orr.w	r2, r3, #32
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e063      	b.n	8000f2e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e66:	f7ff feb3 	bl	8000bd0 <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e6c:	e021      	b.n	8000eb2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d01d      	beq.n	8000eb2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <HAL_ADC_PollForConversion+0x6c>
 8000e7c:	f7ff fea8 	bl	8000bd0 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d212      	bcs.n	8000eb2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d00b      	beq.n	8000eb2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f043 0204 	orr.w	r2, r3, #4
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e03d      	b.n	8000f2e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d1d6      	bne.n	8000e6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f06f 0212 	mvn.w	r2, #18
 8000ec8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d123      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d11f      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d111      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_ADC_ConfigChannel+0x1c>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e105      	b.n	8001178 <HAL_ADC_ConfigChannel+0x228>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d925      	bls.n	8000fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68d9      	ldr	r1, [r3, #12]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b1e      	subs	r3, #30
 8000f92:	2207      	movs	r2, #7
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43da      	mvns	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68d9      	ldr	r1, [r3, #12]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4403      	add	r3, r0
 8000fba:	3b1e      	subs	r3, #30
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	e022      	b.n	800100e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6919      	ldr	r1, [r3, #16]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	2207      	movs	r2, #7
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	400a      	ands	r2, r1
 8000fea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6919      	ldr	r1, [r3, #16]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4403      	add	r3, r0
 8001004:	409a      	lsls	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b06      	cmp	r3, #6
 8001014:	d824      	bhi.n	8001060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	3b05      	subs	r3, #5
 8001028:	221f      	movs	r2, #31
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	400a      	ands	r2, r1
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	3b05      	subs	r3, #5
 8001052:	fa00 f203 	lsl.w	r2, r0, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
 800105e:	e04c      	b.n	80010fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	d824      	bhi.n	80010b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b23      	subs	r3, #35	; 0x23
 800107a:	221f      	movs	r2, #31
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43da      	mvns	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	400a      	ands	r2, r1
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	3b23      	subs	r3, #35	; 0x23
 80010a4:	fa00 f203 	lsl.w	r2, r0, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
 80010b0:	e023      	b.n	80010fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b41      	subs	r3, #65	; 0x41
 80010c4:	221f      	movs	r2, #31
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	400a      	ands	r2, r1
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b41      	subs	r3, #65	; 0x41
 80010ee:	fa00 f203 	lsl.w	r2, r0, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_ADC_ConfigChannel+0x234>)
 80010fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a21      	ldr	r2, [pc, #132]	; (8001188 <HAL_ADC_ConfigChannel+0x238>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d109      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1cc>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b12      	cmp	r3, #18
 800110e:	d105      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <HAL_ADC_ConfigChannel+0x238>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d123      	bne.n	800116e <HAL_ADC_ConfigChannel+0x21e>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b10      	cmp	r3, #16
 800112c:	d003      	beq.n	8001136 <HAL_ADC_ConfigChannel+0x1e6>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b11      	cmp	r3, #17
 8001134:	d11b      	bne.n	800116e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b10      	cmp	r3, #16
 8001148:	d111      	bne.n	800116e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_ADC_ConfigChannel+0x23c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_ADC_ConfigChannel+0x240>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	0c9a      	lsrs	r2, r3, #18
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001160:	e002      	b.n	8001168 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3b01      	subs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40012300 	.word	0x40012300
 8001188:	40012000 	.word	0x40012000
 800118c:	20000000 	.word	0x20000000
 8001190:	431bde83 	.word	0x431bde83

08001194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800119c:	4b79      	ldr	r3, [pc, #484]	; (8001384 <ADC_Init+0x1f0>)
 800119e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	021a      	lsls	r2, r3, #8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800120e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6899      	ldr	r1, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	4a58      	ldr	r2, [pc, #352]	; (8001388 <ADC_Init+0x1f4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d022      	beq.n	8001272 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800123a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6899      	ldr	r1, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800125c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6899      	ldr	r1, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e00f      	b.n	8001292 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001290:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0202 	bic.w	r2, r2, #2
 80012a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6899      	ldr	r1, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
 80012ac:	005a      	lsls	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01b      	beq.n	80012f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6859      	ldr	r1, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	3b01      	subs	r3, #1
 80012ec:	035a      	lsls	r2, r3, #13
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	e007      	b.n	8001308 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001306:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	3b01      	subs	r3, #1
 8001324:	051a      	lsls	r2, r3, #20
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800133c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6899      	ldr	r1, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800134a:	025a      	lsls	r2, r3, #9
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6899      	ldr	r1, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	029a      	lsls	r2, r3, #10
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40012300 	.word	0x40012300
 8001388:	0f000001 	.word	0x0f000001

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff47 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff5c 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffb0 	bl	80014ac <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e159      	b.n	8001828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8148 	bne.w	8001822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d005      	beq.n	80015aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d130      	bne.n	800160c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d017      	beq.n	8001648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a2 	beq.w	8001822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b57      	ldr	r3, [pc, #348]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a56      	ldr	r2, [pc, #344]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	4a52      	ldr	r2, [pc, #328]	; (8001844 <HAL_GPIO_Init+0x2ec>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a49      	ldr	r2, [pc, #292]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x202>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a48      	ldr	r2, [pc, #288]	; (800184c <HAL_GPIO_Init+0x2f4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x1fe>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a47      	ldr	r2, [pc, #284]	; (8001850 <HAL_GPIO_Init+0x2f8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x1fa>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a46      	ldr	r2, [pc, #280]	; (8001854 <HAL_GPIO_Init+0x2fc>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x1f6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a45      	ldr	r2, [pc, #276]	; (8001858 <HAL_GPIO_Init+0x300>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x1f2>
 8001746:	2304      	movs	r3, #4
 8001748:	e008      	b.n	800175c <HAL_GPIO_Init+0x204>
 800174a:	2307      	movs	r3, #7
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x204>
 800174e:	2303      	movs	r3, #3
 8001750:	e004      	b.n	800175c <HAL_GPIO_Init+0x204>
 8001752:	2302      	movs	r3, #2
 8001754:	e002      	b.n	800175c <HAL_GPIO_Init+0x204>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x204>
 800175a:	2300      	movs	r3, #0
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f002 0203 	and.w	r2, r2, #3
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4093      	lsls	r3, r2
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176c:	4935      	ldr	r1, [pc, #212]	; (8001844 <HAL_GPIO_Init+0x2ec>)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_GPIO_Init+0x304>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179e:	4a2f      	ldr	r2, [pc, #188]	; (800185c <HAL_GPIO_Init+0x304>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_GPIO_Init+0x304>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <HAL_GPIO_Init+0x304>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_GPIO_Init+0x304>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f2:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_GPIO_Init+0x304>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_GPIO_Init+0x304>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <HAL_GPIO_Init+0x304>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	f67f aea2 	bls.w	8001574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40013800 	.word	0x40013800
 8001848:	40020000 	.word	0x40020000
 800184c:	40020400 	.word	0x40020400
 8001850:	40020800 	.word	0x40020800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	40021000 	.word	0x40021000
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e267      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d075      	beq.n	800196a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800187e:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b04      	cmp	r3, #4
 8001888:	d00c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b85      	ldr	r3, [pc, #532]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001892:	2b08      	cmp	r3, #8
 8001894:	d112      	bne.n	80018bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001896:	4b82      	ldr	r3, [pc, #520]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018a2:	d10b      	bne.n	80018bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	4b7e      	ldr	r3, [pc, #504]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d05b      	beq.n	8001968 <HAL_RCC_OscConfig+0x108>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d157      	bne.n	8001968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e242      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x74>
 80018c6:	4b76      	ldr	r3, [pc, #472]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a75      	ldr	r2, [pc, #468]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0xb0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x98>
 80018de:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6f      	ldr	r2, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6c      	ldr	r2, [pc, #432]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0xb0>
 80018f8:	4b69      	ldr	r3, [pc, #420]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a68      	ldr	r2, [pc, #416]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff f95a 	bl	8000bd0 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff f956 	bl	8000bd0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e207      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b5b      	ldr	r3, [pc, #364]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xc0>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff f946 	bl	8000bd0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff f942 	bl	8000bd0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1f3      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	4b51      	ldr	r3, [pc, #324]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0xe8>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d063      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001976:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d11c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d116      	bne.n	80019c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x152>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1c7      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4937      	ldr	r1, [pc, #220]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e03a      	b.n	8001a3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <HAL_RCC_OscConfig+0x244>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f8fb 	bl	8000bd0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff f8f7 	bl	8000bd0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1a8      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4925      	ldr	r1, [pc, #148]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_RCC_OscConfig+0x244>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f8da 	bl	8000bd0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff f8d6 	bl	8000bd0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e187      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d036      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x248>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff f8ba 	bl	8000bd0 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff f8b6 	bl	8000bd0 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e167      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x240>)
 8001a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x200>
 8001a7e:	e01b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_OscConfig+0x248>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff f8a3 	bl	8000bd0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	e00e      	b.n	8001aac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f89f 	bl	8000bd0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d907      	bls.n	8001aac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e150      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	42470000 	.word	0x42470000
 8001aa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ea      	bne.n	8001a8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8097 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b7d      	ldr	r3, [pc, #500]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a7c      	ldr	r2, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af6:	4b77      	ldr	r3, [pc, #476]	; (8001cd4 <HAL_RCC_OscConfig+0x474>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b02:	4b74      	ldr	r3, [pc, #464]	; (8001cd4 <HAL_RCC_OscConfig+0x474>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a73      	ldr	r2, [pc, #460]	; (8001cd4 <HAL_RCC_OscConfig+0x474>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f85f 	bl	8000bd0 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7ff f85b 	bl	8000bd0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e10c      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x474>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2ea>
 8001b3c:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a63      	ldr	r2, [pc, #396]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x324>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x30c>
 8001b52:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a5e      	ldr	r2, [pc, #376]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a5b      	ldr	r2, [pc, #364]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x324>
 8001b6c:	4b58      	ldr	r3, [pc, #352]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	4a57      	ldr	r2, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70
 8001b78:	4b55      	ldr	r3, [pc, #340]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a54      	ldr	r2, [pc, #336]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	f023 0304 	bic.w	r3, r3, #4
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d015      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f820 	bl	8000bd0 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff f81c 	bl	8000bd0 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0cb      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ee      	beq.n	8001b94 <HAL_RCC_OscConfig+0x334>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f80a 	bl	8000bd0 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff f806 	bl	8000bd0 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e0b5      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a38      	ldr	r2, [pc, #224]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a1 	beq.w	8001d40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d05c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d141      	bne.n	8001c96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCC_OscConfig+0x478>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe ffda 	bl	8000bd0 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe ffd6 	bl	8000bd0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e087      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	3b01      	subs	r3, #1
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	491b      	ldr	r1, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x478>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7fe ffaf 	bl	8000bd0 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c76:	f7fe ffab 	bl	8000bd0 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e05c      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x416>
 8001c94:	e054      	b.n	8001d40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_RCC_OscConfig+0x478>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ff98 	bl	8000bd0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe ff94 	bl	8000bd0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e045      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x444>
 8001cc2:	e03d      	b.n	8001d40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e038      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x4ec>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d028      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d121      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d11a      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	3b01      	subs	r3, #1
 8001d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0cc      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d90c      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b63      	ldr	r3, [pc, #396]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b8      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	494d      	ldr	r1, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d044      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d119      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e067      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4934      	ldr	r1, [pc, #208]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e40:	f7fe fec6 	bl	8000bd0 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe fec2 	bl	8000bd0 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e04f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d20c      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e032      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4916      	ldr	r1, [pc, #88]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	490e      	ldr	r1, [pc, #56]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ed6:	f000 f821 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001eda:	4602      	mov	r2, r0
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	490a      	ldr	r1, [pc, #40]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	5ccb      	ldrb	r3, [r1, r3]
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fe26 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	080032d8 	.word	0x080032d8
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f20:	b094      	sub	sp, #80	; 0x50
 8001f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	647b      	str	r3, [r7, #68]	; 0x44
 8001f28:	2300      	movs	r3, #0
 8001f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f34:	4b79      	ldr	r3, [pc, #484]	; (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d00d      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x40>
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	f200 80e1 	bhi.w	8002108 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x34>
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f4e:	e0db      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f54:	e0db      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f56:	4b73      	ldr	r3, [pc, #460]	; (8002124 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f5a:	e0d8      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4b6f      	ldr	r3, [pc, #444]	; (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f66:	4b6d      	ldr	r3, [pc, #436]	; (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b6a      	ldr	r3, [pc, #424]	; (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	2200      	movs	r2, #0
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
 8001f86:	2300      	movs	r3, #0
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f8e:	4622      	mov	r2, r4
 8001f90:	462b      	mov	r3, r5
 8001f92:	f04f 0000 	mov.w	r0, #0
 8001f96:	f04f 0100 	mov.w	r1, #0
 8001f9a:	0159      	lsls	r1, r3, #5
 8001f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa0:	0150      	lsls	r0, r2, #5
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	1a51      	subs	r1, r2, r1
 8001faa:	6139      	str	r1, [r7, #16]
 8001fac:	4629      	mov	r1, r5
 8001fae:	eb63 0301 	sbc.w	r3, r3, r1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fc0:	4659      	mov	r1, fp
 8001fc2:	018b      	lsls	r3, r1, #6
 8001fc4:	4651      	mov	r1, sl
 8001fc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fca:	4651      	mov	r1, sl
 8001fcc:	018a      	lsls	r2, r1, #6
 8001fce:	4651      	mov	r1, sl
 8001fd0:	ebb2 0801 	subs.w	r8, r2, r1
 8001fd4:	4659      	mov	r1, fp
 8001fd6:	eb63 0901 	sbc.w	r9, r3, r1
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fee:	4690      	mov	r8, r2
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	eb18 0303 	adds.w	r3, r8, r3
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	462b      	mov	r3, r5
 8001ffc:	eb49 0303 	adc.w	r3, r9, r3
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800200e:	4629      	mov	r1, r5
 8002010:	024b      	lsls	r3, r1, #9
 8002012:	4621      	mov	r1, r4
 8002014:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002018:	4621      	mov	r1, r4
 800201a:	024a      	lsls	r2, r1, #9
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002022:	2200      	movs	r2, #0
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
 8002026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800202c:	f7fe f930 	bl	8000290 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4613      	mov	r3, r2
 8002036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002038:	e058      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	099b      	lsrs	r3, r3, #6
 8002040:	2200      	movs	r2, #0
 8002042:	4618      	mov	r0, r3
 8002044:	4611      	mov	r1, r2
 8002046:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002054:	4642      	mov	r2, r8
 8002056:	464b      	mov	r3, r9
 8002058:	f04f 0000 	mov.w	r0, #0
 800205c:	f04f 0100 	mov.w	r1, #0
 8002060:	0159      	lsls	r1, r3, #5
 8002062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002066:	0150      	lsls	r0, r2, #5
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4641      	mov	r1, r8
 800206e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002072:	4649      	mov	r1, r9
 8002074:	eb63 0b01 	sbc.w	fp, r3, r1
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002084:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002088:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800208c:	ebb2 040a 	subs.w	r4, r2, sl
 8002090:	eb63 050b 	sbc.w	r5, r3, fp
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	00eb      	lsls	r3, r5, #3
 800209e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a2:	00e2      	lsls	r2, r4, #3
 80020a4:	4614      	mov	r4, r2
 80020a6:	461d      	mov	r5, r3
 80020a8:	4643      	mov	r3, r8
 80020aa:	18e3      	adds	r3, r4, r3
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	464b      	mov	r3, r9
 80020b0:	eb45 0303 	adc.w	r3, r5, r3
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c2:	4629      	mov	r1, r5
 80020c4:	028b      	lsls	r3, r1, #10
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020cc:	4621      	mov	r1, r4
 80020ce:	028a      	lsls	r2, r1, #10
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d6:	2200      	movs	r2, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	61fa      	str	r2, [r7, #28]
 80020dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e0:	f7fe f8d6 	bl	8000290 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4613      	mov	r3, r2
 80020ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_GetSysClockFreq+0x200>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80020fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetSysClockFreq+0x204>)
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002110:	4618      	mov	r0, r3
 8002112:	3750      	adds	r7, #80	; 0x50
 8002114:	46bd      	mov	sp, r7
 8002116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	00f42400 	.word	0x00f42400
 8002124:	007a1200 	.word	0x007a1200

08002128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002144:	f7ff fff0 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0a9b      	lsrs	r3, r3, #10
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	080032e8 	.word	0x080032e8

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff ffdc 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0b5b      	lsrs	r3, r3, #13
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	080032e8 	.word	0x080032e8

08002190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e03f      	b.n	8002222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fbc0 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f929 	bl	800242c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b08a      	sub	sp, #40	; 0x28
 800222e:	af02      	add	r7, sp, #8
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	4613      	mov	r3, r2
 8002238:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	d17c      	bne.n	8002344 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_UART_Transmit+0x2c>
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e075      	b.n	8002346 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_UART_Transmit+0x3e>
 8002264:	2302      	movs	r3, #2
 8002266:	e06e      	b.n	8002346 <HAL_UART_Transmit+0x11c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800227e:	f7fe fca7 	bl	8000bd0 <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	88fa      	ldrh	r2, [r7, #6]
 800228e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002298:	d108      	bne.n	80022ac <HAL_UART_Transmit+0x82>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	e003      	b.n	80022b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022bc:	e02a      	b.n	8002314 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f840 	bl	800234e <UART_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e036      	b.n	8002346 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10b      	bne.n	80022f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	3302      	adds	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e007      	b.n	8002306 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1cf      	bne.n	80022be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2200      	movs	r2, #0
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f810 	bl	800234e <UART_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e006      	b.n	8002346 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b090      	sub	sp, #64	; 0x40
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235e:	e050      	b.n	8002402 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002366:	d04c      	beq.n	8002402 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <UART_WaitOnFlagUntilTimeout+0x30>
 800236e:	f7fe fc2f 	bl	8000bd0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800237a:	429a      	cmp	r2, r3
 800237c:	d241      	bcs.n	8002402 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	330c      	adds	r3, #12
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	e853 3f00 	ldrex	r3, [r3]
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	330c      	adds	r3, #12
 800239c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800239e:	637a      	str	r2, [r7, #52]	; 0x34
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a6:	e841 2300 	strex	r3, r2, [r1]
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e5      	bne.n	800237e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	613b      	str	r3, [r7, #16]
   return(result);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3314      	adds	r3, #20
 80023d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023d2:	623a      	str	r2, [r7, #32]
 80023d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d6:	69f9      	ldr	r1, [r7, #28]
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	e841 2300 	strex	r3, r2, [r1]
 80023de:	61bb      	str	r3, [r7, #24]
   return(result);
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e5      	bne.n	80023b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e00f      	b.n	8002422 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	429a      	cmp	r2, r3
 8002410:	bf0c      	ite	eq
 8002412:	2301      	moveq	r3, #1
 8002414:	2300      	movne	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	429a      	cmp	r2, r3
 800241e:	d09f      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3740      	adds	r7, #64	; 0x40
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800242c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002430:	b0c0      	sub	sp, #256	; 0x100
 8002432:	af00      	add	r7, sp, #0
 8002434:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	68d9      	ldr	r1, [r3, #12]
 800244a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	ea40 0301 	orr.w	r3, r0, r1
 8002454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	431a      	orrs	r2, r3
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	431a      	orrs	r2, r3
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002484:	f021 010c 	bic.w	r1, r1, #12
 8002488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002492:	430b      	orrs	r3, r1
 8002494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a6:	6999      	ldr	r1, [r3, #24]
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	ea40 0301 	orr.w	r3, r0, r1
 80024b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b8f      	ldr	r3, [pc, #572]	; (80026f8 <UART_SetConfig+0x2cc>)
 80024bc:	429a      	cmp	r2, r3
 80024be:	d005      	beq.n	80024cc <UART_SetConfig+0xa0>
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <UART_SetConfig+0x2d0>)
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d104      	bne.n	80024d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024cc:	f7ff fe4c 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 80024d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024d4:	e003      	b.n	80024de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024d6:	f7ff fe33 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80024da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e8:	f040 810c 	bne.w	8002704 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f0:	2200      	movs	r2, #0
 80024f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024fe:	4622      	mov	r2, r4
 8002500:	462b      	mov	r3, r5
 8002502:	1891      	adds	r1, r2, r2
 8002504:	65b9      	str	r1, [r7, #88]	; 0x58
 8002506:	415b      	adcs	r3, r3
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800250a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800250e:	4621      	mov	r1, r4
 8002510:	eb12 0801 	adds.w	r8, r2, r1
 8002514:	4629      	mov	r1, r5
 8002516:	eb43 0901 	adc.w	r9, r3, r1
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800252a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252e:	4690      	mov	r8, r2
 8002530:	4699      	mov	r9, r3
 8002532:	4623      	mov	r3, r4
 8002534:	eb18 0303 	adds.w	r3, r8, r3
 8002538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800253c:	462b      	mov	r3, r5
 800253e:	eb49 0303 	adc.w	r3, r9, r3
 8002542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002552:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002556:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800255a:	460b      	mov	r3, r1
 800255c:	18db      	adds	r3, r3, r3
 800255e:	653b      	str	r3, [r7, #80]	; 0x50
 8002560:	4613      	mov	r3, r2
 8002562:	eb42 0303 	adc.w	r3, r2, r3
 8002566:	657b      	str	r3, [r7, #84]	; 0x54
 8002568:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800256c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002570:	f7fd fe8e 	bl	8000290 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4b61      	ldr	r3, [pc, #388]	; (8002700 <UART_SetConfig+0x2d4>)
 800257a:	fba3 2302 	umull	r2, r3, r3, r2
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	011c      	lsls	r4, r3, #4
 8002582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800258c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002590:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002594:	4642      	mov	r2, r8
 8002596:	464b      	mov	r3, r9
 8002598:	1891      	adds	r1, r2, r2
 800259a:	64b9      	str	r1, [r7, #72]	; 0x48
 800259c:	415b      	adcs	r3, r3
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025a4:	4641      	mov	r1, r8
 80025a6:	eb12 0a01 	adds.w	sl, r2, r1
 80025aa:	4649      	mov	r1, r9
 80025ac:	eb43 0b01 	adc.w	fp, r3, r1
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025c4:	4692      	mov	sl, r2
 80025c6:	469b      	mov	fp, r3
 80025c8:	4643      	mov	r3, r8
 80025ca:	eb1a 0303 	adds.w	r3, sl, r3
 80025ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025d2:	464b      	mov	r3, r9
 80025d4:	eb4b 0303 	adc.w	r3, fp, r3
 80025d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025f0:	460b      	mov	r3, r1
 80025f2:	18db      	adds	r3, r3, r3
 80025f4:	643b      	str	r3, [r7, #64]	; 0x40
 80025f6:	4613      	mov	r3, r2
 80025f8:	eb42 0303 	adc.w	r3, r2, r3
 80025fc:	647b      	str	r3, [r7, #68]	; 0x44
 80025fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002606:	f7fd fe43 	bl	8000290 <__aeabi_uldivmod>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4611      	mov	r1, r2
 8002610:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <UART_SetConfig+0x2d4>)
 8002612:	fba3 2301 	umull	r2, r3, r3, r1
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2264      	movs	r2, #100	; 0x64
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	1acb      	subs	r3, r1, r3
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <UART_SetConfig+0x2d4>)
 8002628:	fba3 2302 	umull	r2, r3, r3, r2
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002634:	441c      	add	r4, r3
 8002636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800263a:	2200      	movs	r2, #0
 800263c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002640:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002644:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002648:	4642      	mov	r2, r8
 800264a:	464b      	mov	r3, r9
 800264c:	1891      	adds	r1, r2, r2
 800264e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002650:	415b      	adcs	r3, r3
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002658:	4641      	mov	r1, r8
 800265a:	1851      	adds	r1, r2, r1
 800265c:	6339      	str	r1, [r7, #48]	; 0x30
 800265e:	4649      	mov	r1, r9
 8002660:	414b      	adcs	r3, r1
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002670:	4659      	mov	r1, fp
 8002672:	00cb      	lsls	r3, r1, #3
 8002674:	4651      	mov	r1, sl
 8002676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800267a:	4651      	mov	r1, sl
 800267c:	00ca      	lsls	r2, r1, #3
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	4603      	mov	r3, r0
 8002684:	4642      	mov	r2, r8
 8002686:	189b      	adds	r3, r3, r2
 8002688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800268c:	464b      	mov	r3, r9
 800268e:	460a      	mov	r2, r1
 8002690:	eb42 0303 	adc.w	r3, r2, r3
 8002694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026ac:	460b      	mov	r3, r1
 80026ae:	18db      	adds	r3, r3, r3
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b2:	4613      	mov	r3, r2
 80026b4:	eb42 0303 	adc.w	r3, r2, r3
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026c2:	f7fd fde5 	bl	8000290 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <UART_SetConfig+0x2d4>)
 80026cc:	fba3 1302 	umull	r1, r3, r3, r2
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	2164      	movs	r1, #100	; 0x64
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	3332      	adds	r3, #50	; 0x32
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <UART_SetConfig+0x2d4>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	f003 0207 	and.w	r2, r3, #7
 80026ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4422      	add	r2, r4
 80026f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026f4:	e106      	b.n	8002904 <UART_SetConfig+0x4d8>
 80026f6:	bf00      	nop
 80026f8:	40011000 	.word	0x40011000
 80026fc:	40011400 	.word	0x40011400
 8002700:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002708:	2200      	movs	r2, #0
 800270a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800270e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002712:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002716:	4642      	mov	r2, r8
 8002718:	464b      	mov	r3, r9
 800271a:	1891      	adds	r1, r2, r2
 800271c:	6239      	str	r1, [r7, #32]
 800271e:	415b      	adcs	r3, r3
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002726:	4641      	mov	r1, r8
 8002728:	1854      	adds	r4, r2, r1
 800272a:	4649      	mov	r1, r9
 800272c:	eb43 0501 	adc.w	r5, r3, r1
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	00eb      	lsls	r3, r5, #3
 800273a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800273e:	00e2      	lsls	r2, r4, #3
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	4643      	mov	r3, r8
 8002746:	18e3      	adds	r3, r4, r3
 8002748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800274c:	464b      	mov	r3, r9
 800274e:	eb45 0303 	adc.w	r3, r5, r3
 8002752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002772:	4629      	mov	r1, r5
 8002774:	008b      	lsls	r3, r1, #2
 8002776:	4621      	mov	r1, r4
 8002778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800277c:	4621      	mov	r1, r4
 800277e:	008a      	lsls	r2, r1, #2
 8002780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002784:	f7fd fd84 	bl	8000290 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4b60      	ldr	r3, [pc, #384]	; (8002910 <UART_SetConfig+0x4e4>)
 800278e:	fba3 2302 	umull	r2, r3, r3, r2
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	011c      	lsls	r4, r3, #4
 8002796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800279a:	2200      	movs	r2, #0
 800279c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027a8:	4642      	mov	r2, r8
 80027aa:	464b      	mov	r3, r9
 80027ac:	1891      	adds	r1, r2, r2
 80027ae:	61b9      	str	r1, [r7, #24]
 80027b0:	415b      	adcs	r3, r3
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b8:	4641      	mov	r1, r8
 80027ba:	1851      	adds	r1, r2, r1
 80027bc:	6139      	str	r1, [r7, #16]
 80027be:	4649      	mov	r1, r9
 80027c0:	414b      	adcs	r3, r1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027d0:	4659      	mov	r1, fp
 80027d2:	00cb      	lsls	r3, r1, #3
 80027d4:	4651      	mov	r1, sl
 80027d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027da:	4651      	mov	r1, sl
 80027dc:	00ca      	lsls	r2, r1, #3
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	4642      	mov	r2, r8
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027ec:	464b      	mov	r3, r9
 80027ee:	460a      	mov	r2, r1
 80027f0:	eb42 0303 	adc.w	r3, r2, r3
 80027f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	67bb      	str	r3, [r7, #120]	; 0x78
 8002802:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002810:	4649      	mov	r1, r9
 8002812:	008b      	lsls	r3, r1, #2
 8002814:	4641      	mov	r1, r8
 8002816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800281a:	4641      	mov	r1, r8
 800281c:	008a      	lsls	r2, r1, #2
 800281e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002822:	f7fd fd35 	bl	8000290 <__aeabi_uldivmod>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4611      	mov	r1, r2
 800282c:	4b38      	ldr	r3, [pc, #224]	; (8002910 <UART_SetConfig+0x4e4>)
 800282e:	fba3 2301 	umull	r2, r3, r3, r1
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2264      	movs	r2, #100	; 0x64
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	1acb      	subs	r3, r1, r3
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	3332      	adds	r3, #50	; 0x32
 8002840:	4a33      	ldr	r2, [pc, #204]	; (8002910 <UART_SetConfig+0x4e4>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	441c      	add	r4, r3
 800284e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002852:	2200      	movs	r2, #0
 8002854:	673b      	str	r3, [r7, #112]	; 0x70
 8002856:	677a      	str	r2, [r7, #116]	; 0x74
 8002858:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800285c:	4642      	mov	r2, r8
 800285e:	464b      	mov	r3, r9
 8002860:	1891      	adds	r1, r2, r2
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	415b      	adcs	r3, r3
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800286c:	4641      	mov	r1, r8
 800286e:	1851      	adds	r1, r2, r1
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	4649      	mov	r1, r9
 8002874:	414b      	adcs	r3, r1
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002884:	4659      	mov	r1, fp
 8002886:	00cb      	lsls	r3, r1, #3
 8002888:	4651      	mov	r1, sl
 800288a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800288e:	4651      	mov	r1, sl
 8002890:	00ca      	lsls	r2, r1, #3
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	4603      	mov	r3, r0
 8002898:	4642      	mov	r2, r8
 800289a:	189b      	adds	r3, r3, r2
 800289c:	66bb      	str	r3, [r7, #104]	; 0x68
 800289e:	464b      	mov	r3, r9
 80028a0:	460a      	mov	r2, r1
 80028a2:	eb42 0303 	adc.w	r3, r2, r3
 80028a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	663b      	str	r3, [r7, #96]	; 0x60
 80028b2:	667a      	str	r2, [r7, #100]	; 0x64
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028c0:	4649      	mov	r1, r9
 80028c2:	008b      	lsls	r3, r1, #2
 80028c4:	4641      	mov	r1, r8
 80028c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ca:	4641      	mov	r1, r8
 80028cc:	008a      	lsls	r2, r1, #2
 80028ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028d2:	f7fd fcdd 	bl	8000290 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <UART_SetConfig+0x4e4>)
 80028dc:	fba3 1302 	umull	r1, r3, r3, r2
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	2164      	movs	r1, #100	; 0x64
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	3332      	adds	r3, #50	; 0x32
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <UART_SetConfig+0x4e4>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4422      	add	r2, r4
 8002902:	609a      	str	r2, [r3, #8]
}
 8002904:	bf00      	nop
 8002906:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800290a:	46bd      	mov	sp, r7
 800290c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002910:	51eb851f 	.word	0x51eb851f

08002914 <sniprintf>:
 8002914:	b40c      	push	{r2, r3}
 8002916:	b530      	push	{r4, r5, lr}
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <sniprintf+0x64>)
 800291a:	1e0c      	subs	r4, r1, #0
 800291c:	681d      	ldr	r5, [r3, #0]
 800291e:	b09d      	sub	sp, #116	; 0x74
 8002920:	da08      	bge.n	8002934 <sniprintf+0x20>
 8002922:	238b      	movs	r3, #139	; 0x8b
 8002924:	602b      	str	r3, [r5, #0]
 8002926:	f04f 30ff 	mov.w	r0, #4294967295
 800292a:	b01d      	add	sp, #116	; 0x74
 800292c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002930:	b002      	add	sp, #8
 8002932:	4770      	bx	lr
 8002934:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002938:	f8ad 3014 	strh.w	r3, [sp, #20]
 800293c:	bf14      	ite	ne
 800293e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002942:	4623      	moveq	r3, r4
 8002944:	9304      	str	r3, [sp, #16]
 8002946:	9307      	str	r3, [sp, #28]
 8002948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800294c:	9002      	str	r0, [sp, #8]
 800294e:	9006      	str	r0, [sp, #24]
 8002950:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002954:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002956:	ab21      	add	r3, sp, #132	; 0x84
 8002958:	a902      	add	r1, sp, #8
 800295a:	4628      	mov	r0, r5
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	f000 f993 	bl	8002c88 <_svfiprintf_r>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	bfbc      	itt	lt
 8002966:	238b      	movlt	r3, #139	; 0x8b
 8002968:	602b      	strlt	r3, [r5, #0]
 800296a:	2c00      	cmp	r4, #0
 800296c:	d0dd      	beq.n	800292a <sniprintf+0x16>
 800296e:	9b02      	ldr	r3, [sp, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e7d9      	b.n	800292a <sniprintf+0x16>
 8002976:	bf00      	nop
 8002978:	20000058 	.word	0x20000058

0800297c <memset>:
 800297c:	4402      	add	r2, r0
 800297e:	4603      	mov	r3, r0
 8002980:	4293      	cmp	r3, r2
 8002982:	d100      	bne.n	8002986 <memset+0xa>
 8002984:	4770      	bx	lr
 8002986:	f803 1b01 	strb.w	r1, [r3], #1
 800298a:	e7f9      	b.n	8002980 <memset+0x4>

0800298c <__errno>:
 800298c:	4b01      	ldr	r3, [pc, #4]	; (8002994 <__errno+0x8>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000058 	.word	0x20000058

08002998 <__libc_init_array>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	4d0d      	ldr	r5, [pc, #52]	; (80029d0 <__libc_init_array+0x38>)
 800299c:	4c0d      	ldr	r4, [pc, #52]	; (80029d4 <__libc_init_array+0x3c>)
 800299e:	1b64      	subs	r4, r4, r5
 80029a0:	10a4      	asrs	r4, r4, #2
 80029a2:	2600      	movs	r6, #0
 80029a4:	42a6      	cmp	r6, r4
 80029a6:	d109      	bne.n	80029bc <__libc_init_array+0x24>
 80029a8:	4d0b      	ldr	r5, [pc, #44]	; (80029d8 <__libc_init_array+0x40>)
 80029aa:	4c0c      	ldr	r4, [pc, #48]	; (80029dc <__libc_init_array+0x44>)
 80029ac:	f000 fc6a 	bl	8003284 <_init>
 80029b0:	1b64      	subs	r4, r4, r5
 80029b2:	10a4      	asrs	r4, r4, #2
 80029b4:	2600      	movs	r6, #0
 80029b6:	42a6      	cmp	r6, r4
 80029b8:	d105      	bne.n	80029c6 <__libc_init_array+0x2e>
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c0:	4798      	blx	r3
 80029c2:	3601      	adds	r6, #1
 80029c4:	e7ee      	b.n	80029a4 <__libc_init_array+0xc>
 80029c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ca:	4798      	blx	r3
 80029cc:	3601      	adds	r6, #1
 80029ce:	e7f2      	b.n	80029b6 <__libc_init_array+0x1e>
 80029d0:	0800332c 	.word	0x0800332c
 80029d4:	0800332c 	.word	0x0800332c
 80029d8:	0800332c 	.word	0x0800332c
 80029dc:	08003330 	.word	0x08003330

080029e0 <__retarget_lock_acquire_recursive>:
 80029e0:	4770      	bx	lr

080029e2 <__retarget_lock_release_recursive>:
 80029e2:	4770      	bx	lr

080029e4 <_free_r>:
 80029e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029e6:	2900      	cmp	r1, #0
 80029e8:	d044      	beq.n	8002a74 <_free_r+0x90>
 80029ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029ee:	9001      	str	r0, [sp, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f1a1 0404 	sub.w	r4, r1, #4
 80029f6:	bfb8      	it	lt
 80029f8:	18e4      	addlt	r4, r4, r3
 80029fa:	f000 f8df 	bl	8002bbc <__malloc_lock>
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <_free_r+0x94>)
 8002a00:	9801      	ldr	r0, [sp, #4]
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	b933      	cbnz	r3, 8002a14 <_free_r+0x30>
 8002a06:	6063      	str	r3, [r4, #4]
 8002a08:	6014      	str	r4, [r2, #0]
 8002a0a:	b003      	add	sp, #12
 8002a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a10:	f000 b8da 	b.w	8002bc8 <__malloc_unlock>
 8002a14:	42a3      	cmp	r3, r4
 8002a16:	d908      	bls.n	8002a2a <_free_r+0x46>
 8002a18:	6825      	ldr	r5, [r4, #0]
 8002a1a:	1961      	adds	r1, r4, r5
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	bf01      	itttt	eq
 8002a20:	6819      	ldreq	r1, [r3, #0]
 8002a22:	685b      	ldreq	r3, [r3, #4]
 8002a24:	1949      	addeq	r1, r1, r5
 8002a26:	6021      	streq	r1, [r4, #0]
 8002a28:	e7ed      	b.n	8002a06 <_free_r+0x22>
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	b10b      	cbz	r3, 8002a34 <_free_r+0x50>
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	d9fa      	bls.n	8002a2a <_free_r+0x46>
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	1855      	adds	r5, r2, r1
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d10b      	bne.n	8002a54 <_free_r+0x70>
 8002a3c:	6824      	ldr	r4, [r4, #0]
 8002a3e:	4421      	add	r1, r4
 8002a40:	1854      	adds	r4, r2, r1
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	d1e0      	bne.n	8002a0a <_free_r+0x26>
 8002a48:	681c      	ldr	r4, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6053      	str	r3, [r2, #4]
 8002a4e:	440c      	add	r4, r1
 8002a50:	6014      	str	r4, [r2, #0]
 8002a52:	e7da      	b.n	8002a0a <_free_r+0x26>
 8002a54:	d902      	bls.n	8002a5c <_free_r+0x78>
 8002a56:	230c      	movs	r3, #12
 8002a58:	6003      	str	r3, [r0, #0]
 8002a5a:	e7d6      	b.n	8002a0a <_free_r+0x26>
 8002a5c:	6825      	ldr	r5, [r4, #0]
 8002a5e:	1961      	adds	r1, r4, r5
 8002a60:	428b      	cmp	r3, r1
 8002a62:	bf04      	itt	eq
 8002a64:	6819      	ldreq	r1, [r3, #0]
 8002a66:	685b      	ldreq	r3, [r3, #4]
 8002a68:	6063      	str	r3, [r4, #4]
 8002a6a:	bf04      	itt	eq
 8002a6c:	1949      	addeq	r1, r1, r5
 8002a6e:	6021      	streq	r1, [r4, #0]
 8002a70:	6054      	str	r4, [r2, #4]
 8002a72:	e7ca      	b.n	8002a0a <_free_r+0x26>
 8002a74:	b003      	add	sp, #12
 8002a76:	bd30      	pop	{r4, r5, pc}
 8002a78:	2000024c 	.word	0x2000024c

08002a7c <sbrk_aligned>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	4e0e      	ldr	r6, [pc, #56]	; (8002ab8 <sbrk_aligned+0x3c>)
 8002a80:	460c      	mov	r4, r1
 8002a82:	6831      	ldr	r1, [r6, #0]
 8002a84:	4605      	mov	r5, r0
 8002a86:	b911      	cbnz	r1, 8002a8e <sbrk_aligned+0x12>
 8002a88:	f000 fba6 	bl	80031d8 <_sbrk_r>
 8002a8c:	6030      	str	r0, [r6, #0]
 8002a8e:	4621      	mov	r1, r4
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 fba1 	bl	80031d8 <_sbrk_r>
 8002a96:	1c43      	adds	r3, r0, #1
 8002a98:	d00a      	beq.n	8002ab0 <sbrk_aligned+0x34>
 8002a9a:	1cc4      	adds	r4, r0, #3
 8002a9c:	f024 0403 	bic.w	r4, r4, #3
 8002aa0:	42a0      	cmp	r0, r4
 8002aa2:	d007      	beq.n	8002ab4 <sbrk_aligned+0x38>
 8002aa4:	1a21      	subs	r1, r4, r0
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f000 fb96 	bl	80031d8 <_sbrk_r>
 8002aac:	3001      	adds	r0, #1
 8002aae:	d101      	bne.n	8002ab4 <sbrk_aligned+0x38>
 8002ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	20000250 	.word	0x20000250

08002abc <_malloc_r>:
 8002abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ac0:	1ccd      	adds	r5, r1, #3
 8002ac2:	f025 0503 	bic.w	r5, r5, #3
 8002ac6:	3508      	adds	r5, #8
 8002ac8:	2d0c      	cmp	r5, #12
 8002aca:	bf38      	it	cc
 8002acc:	250c      	movcc	r5, #12
 8002ace:	2d00      	cmp	r5, #0
 8002ad0:	4607      	mov	r7, r0
 8002ad2:	db01      	blt.n	8002ad8 <_malloc_r+0x1c>
 8002ad4:	42a9      	cmp	r1, r5
 8002ad6:	d905      	bls.n	8002ae4 <_malloc_r+0x28>
 8002ad8:	230c      	movs	r3, #12
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	2600      	movs	r6, #0
 8002ade:	4630      	mov	r0, r6
 8002ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ae4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002bb8 <_malloc_r+0xfc>
 8002ae8:	f000 f868 	bl	8002bbc <__malloc_lock>
 8002aec:	f8d8 3000 	ldr.w	r3, [r8]
 8002af0:	461c      	mov	r4, r3
 8002af2:	bb5c      	cbnz	r4, 8002b4c <_malloc_r+0x90>
 8002af4:	4629      	mov	r1, r5
 8002af6:	4638      	mov	r0, r7
 8002af8:	f7ff ffc0 	bl	8002a7c <sbrk_aligned>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	4604      	mov	r4, r0
 8002b00:	d155      	bne.n	8002bae <_malloc_r+0xf2>
 8002b02:	f8d8 4000 	ldr.w	r4, [r8]
 8002b06:	4626      	mov	r6, r4
 8002b08:	2e00      	cmp	r6, #0
 8002b0a:	d145      	bne.n	8002b98 <_malloc_r+0xdc>
 8002b0c:	2c00      	cmp	r4, #0
 8002b0e:	d048      	beq.n	8002ba2 <_malloc_r+0xe6>
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	4631      	mov	r1, r6
 8002b14:	4638      	mov	r0, r7
 8002b16:	eb04 0903 	add.w	r9, r4, r3
 8002b1a:	f000 fb5d 	bl	80031d8 <_sbrk_r>
 8002b1e:	4581      	cmp	r9, r0
 8002b20:	d13f      	bne.n	8002ba2 <_malloc_r+0xe6>
 8002b22:	6821      	ldr	r1, [r4, #0]
 8002b24:	1a6d      	subs	r5, r5, r1
 8002b26:	4629      	mov	r1, r5
 8002b28:	4638      	mov	r0, r7
 8002b2a:	f7ff ffa7 	bl	8002a7c <sbrk_aligned>
 8002b2e:	3001      	adds	r0, #1
 8002b30:	d037      	beq.n	8002ba2 <_malloc_r+0xe6>
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	442b      	add	r3, r5
 8002b36:	6023      	str	r3, [r4, #0]
 8002b38:	f8d8 3000 	ldr.w	r3, [r8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d038      	beq.n	8002bb2 <_malloc_r+0xf6>
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	42a2      	cmp	r2, r4
 8002b44:	d12b      	bne.n	8002b9e <_malloc_r+0xe2>
 8002b46:	2200      	movs	r2, #0
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	e00f      	b.n	8002b6c <_malloc_r+0xb0>
 8002b4c:	6822      	ldr	r2, [r4, #0]
 8002b4e:	1b52      	subs	r2, r2, r5
 8002b50:	d41f      	bmi.n	8002b92 <_malloc_r+0xd6>
 8002b52:	2a0b      	cmp	r2, #11
 8002b54:	d917      	bls.n	8002b86 <_malloc_r+0xca>
 8002b56:	1961      	adds	r1, r4, r5
 8002b58:	42a3      	cmp	r3, r4
 8002b5a:	6025      	str	r5, [r4, #0]
 8002b5c:	bf18      	it	ne
 8002b5e:	6059      	strne	r1, [r3, #4]
 8002b60:	6863      	ldr	r3, [r4, #4]
 8002b62:	bf08      	it	eq
 8002b64:	f8c8 1000 	streq.w	r1, [r8]
 8002b68:	5162      	str	r2, [r4, r5]
 8002b6a:	604b      	str	r3, [r1, #4]
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	f104 060b 	add.w	r6, r4, #11
 8002b72:	f000 f829 	bl	8002bc8 <__malloc_unlock>
 8002b76:	f026 0607 	bic.w	r6, r6, #7
 8002b7a:	1d23      	adds	r3, r4, #4
 8002b7c:	1af2      	subs	r2, r6, r3
 8002b7e:	d0ae      	beq.n	8002ade <_malloc_r+0x22>
 8002b80:	1b9b      	subs	r3, r3, r6
 8002b82:	50a3      	str	r3, [r4, r2]
 8002b84:	e7ab      	b.n	8002ade <_malloc_r+0x22>
 8002b86:	42a3      	cmp	r3, r4
 8002b88:	6862      	ldr	r2, [r4, #4]
 8002b8a:	d1dd      	bne.n	8002b48 <_malloc_r+0x8c>
 8002b8c:	f8c8 2000 	str.w	r2, [r8]
 8002b90:	e7ec      	b.n	8002b6c <_malloc_r+0xb0>
 8002b92:	4623      	mov	r3, r4
 8002b94:	6864      	ldr	r4, [r4, #4]
 8002b96:	e7ac      	b.n	8002af2 <_malloc_r+0x36>
 8002b98:	4634      	mov	r4, r6
 8002b9a:	6876      	ldr	r6, [r6, #4]
 8002b9c:	e7b4      	b.n	8002b08 <_malloc_r+0x4c>
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	e7cc      	b.n	8002b3c <_malloc_r+0x80>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	f000 f80e 	bl	8002bc8 <__malloc_unlock>
 8002bac:	e797      	b.n	8002ade <_malloc_r+0x22>
 8002bae:	6025      	str	r5, [r4, #0]
 8002bb0:	e7dc      	b.n	8002b6c <_malloc_r+0xb0>
 8002bb2:	605b      	str	r3, [r3, #4]
 8002bb4:	deff      	udf	#255	; 0xff
 8002bb6:	bf00      	nop
 8002bb8:	2000024c 	.word	0x2000024c

08002bbc <__malloc_lock>:
 8002bbc:	4801      	ldr	r0, [pc, #4]	; (8002bc4 <__malloc_lock+0x8>)
 8002bbe:	f7ff bf0f 	b.w	80029e0 <__retarget_lock_acquire_recursive>
 8002bc2:	bf00      	nop
 8002bc4:	20000248 	.word	0x20000248

08002bc8 <__malloc_unlock>:
 8002bc8:	4801      	ldr	r0, [pc, #4]	; (8002bd0 <__malloc_unlock+0x8>)
 8002bca:	f7ff bf0a 	b.w	80029e2 <__retarget_lock_release_recursive>
 8002bce:	bf00      	nop
 8002bd0:	20000248 	.word	0x20000248

08002bd4 <__ssputs_r>:
 8002bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd8:	688e      	ldr	r6, [r1, #8]
 8002bda:	461f      	mov	r7, r3
 8002bdc:	42be      	cmp	r6, r7
 8002bde:	680b      	ldr	r3, [r1, #0]
 8002be0:	4682      	mov	sl, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	4690      	mov	r8, r2
 8002be6:	d82c      	bhi.n	8002c42 <__ssputs_r+0x6e>
 8002be8:	898a      	ldrh	r2, [r1, #12]
 8002bea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bee:	d026      	beq.n	8002c3e <__ssputs_r+0x6a>
 8002bf0:	6965      	ldr	r5, [r4, #20]
 8002bf2:	6909      	ldr	r1, [r1, #16]
 8002bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bf8:	eba3 0901 	sub.w	r9, r3, r1
 8002bfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c00:	1c7b      	adds	r3, r7, #1
 8002c02:	444b      	add	r3, r9
 8002c04:	106d      	asrs	r5, r5, #1
 8002c06:	429d      	cmp	r5, r3
 8002c08:	bf38      	it	cc
 8002c0a:	461d      	movcc	r5, r3
 8002c0c:	0553      	lsls	r3, r2, #21
 8002c0e:	d527      	bpl.n	8002c60 <__ssputs_r+0x8c>
 8002c10:	4629      	mov	r1, r5
 8002c12:	f7ff ff53 	bl	8002abc <_malloc_r>
 8002c16:	4606      	mov	r6, r0
 8002c18:	b360      	cbz	r0, 8002c74 <__ssputs_r+0xa0>
 8002c1a:	6921      	ldr	r1, [r4, #16]
 8002c1c:	464a      	mov	r2, r9
 8002c1e:	f000 faeb 	bl	80031f8 <memcpy>
 8002c22:	89a3      	ldrh	r3, [r4, #12]
 8002c24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	81a3      	strh	r3, [r4, #12]
 8002c2e:	6126      	str	r6, [r4, #16]
 8002c30:	6165      	str	r5, [r4, #20]
 8002c32:	444e      	add	r6, r9
 8002c34:	eba5 0509 	sub.w	r5, r5, r9
 8002c38:	6026      	str	r6, [r4, #0]
 8002c3a:	60a5      	str	r5, [r4, #8]
 8002c3c:	463e      	mov	r6, r7
 8002c3e:	42be      	cmp	r6, r7
 8002c40:	d900      	bls.n	8002c44 <__ssputs_r+0x70>
 8002c42:	463e      	mov	r6, r7
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	4632      	mov	r2, r6
 8002c48:	4641      	mov	r1, r8
 8002c4a:	f000 faab 	bl	80031a4 <memmove>
 8002c4e:	68a3      	ldr	r3, [r4, #8]
 8002c50:	1b9b      	subs	r3, r3, r6
 8002c52:	60a3      	str	r3, [r4, #8]
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	4433      	add	r3, r6
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c60:	462a      	mov	r2, r5
 8002c62:	f000 fad7 	bl	8003214 <_realloc_r>
 8002c66:	4606      	mov	r6, r0
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d1e0      	bne.n	8002c2e <__ssputs_r+0x5a>
 8002c6c:	6921      	ldr	r1, [r4, #16]
 8002c6e:	4650      	mov	r0, sl
 8002c70:	f7ff feb8 	bl	80029e4 <_free_r>
 8002c74:	230c      	movs	r3, #12
 8002c76:	f8ca 3000 	str.w	r3, [sl]
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c80:	81a3      	strh	r3, [r4, #12]
 8002c82:	f04f 30ff 	mov.w	r0, #4294967295
 8002c86:	e7e9      	b.n	8002c5c <__ssputs_r+0x88>

08002c88 <_svfiprintf_r>:
 8002c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c8c:	4698      	mov	r8, r3
 8002c8e:	898b      	ldrh	r3, [r1, #12]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	b09d      	sub	sp, #116	; 0x74
 8002c94:	4607      	mov	r7, r0
 8002c96:	460d      	mov	r5, r1
 8002c98:	4614      	mov	r4, r2
 8002c9a:	d50e      	bpl.n	8002cba <_svfiprintf_r+0x32>
 8002c9c:	690b      	ldr	r3, [r1, #16]
 8002c9e:	b963      	cbnz	r3, 8002cba <_svfiprintf_r+0x32>
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	f7ff ff0b 	bl	8002abc <_malloc_r>
 8002ca6:	6028      	str	r0, [r5, #0]
 8002ca8:	6128      	str	r0, [r5, #16]
 8002caa:	b920      	cbnz	r0, 8002cb6 <_svfiprintf_r+0x2e>
 8002cac:	230c      	movs	r3, #12
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	e0d0      	b.n	8002e58 <_svfiprintf_r+0x1d0>
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	616b      	str	r3, [r5, #20]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cc8:	2330      	movs	r3, #48	; 0x30
 8002cca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e70 <_svfiprintf_r+0x1e8>
 8002cce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cd2:	f04f 0901 	mov.w	r9, #1
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	469a      	mov	sl, r3
 8002cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cde:	b10a      	cbz	r2, 8002ce4 <_svfiprintf_r+0x5c>
 8002ce0:	2a25      	cmp	r2, #37	; 0x25
 8002ce2:	d1f9      	bne.n	8002cd8 <_svfiprintf_r+0x50>
 8002ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8002ce8:	d00b      	beq.n	8002d02 <_svfiprintf_r+0x7a>
 8002cea:	465b      	mov	r3, fp
 8002cec:	4622      	mov	r2, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	4638      	mov	r0, r7
 8002cf2:	f7ff ff6f 	bl	8002bd4 <__ssputs_r>
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	f000 80a9 	beq.w	8002e4e <_svfiprintf_r+0x1c6>
 8002cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cfe:	445a      	add	r2, fp
 8002d00:	9209      	str	r2, [sp, #36]	; 0x24
 8002d02:	f89a 3000 	ldrb.w	r3, [sl]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80a1 	beq.w	8002e4e <_svfiprintf_r+0x1c6>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d16:	f10a 0a01 	add.w	sl, sl, #1
 8002d1a:	9304      	str	r3, [sp, #16]
 8002d1c:	9307      	str	r3, [sp, #28]
 8002d1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d22:	931a      	str	r3, [sp, #104]	; 0x68
 8002d24:	4654      	mov	r4, sl
 8002d26:	2205      	movs	r2, #5
 8002d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d2c:	4850      	ldr	r0, [pc, #320]	; (8002e70 <_svfiprintf_r+0x1e8>)
 8002d2e:	f7fd fa5f 	bl	80001f0 <memchr>
 8002d32:	9a04      	ldr	r2, [sp, #16]
 8002d34:	b9d8      	cbnz	r0, 8002d6e <_svfiprintf_r+0xe6>
 8002d36:	06d0      	lsls	r0, r2, #27
 8002d38:	bf44      	itt	mi
 8002d3a:	2320      	movmi	r3, #32
 8002d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d40:	0711      	lsls	r1, r2, #28
 8002d42:	bf44      	itt	mi
 8002d44:	232b      	movmi	r3, #43	; 0x2b
 8002d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d50:	d015      	beq.n	8002d7e <_svfiprintf_r+0xf6>
 8002d52:	9a07      	ldr	r2, [sp, #28]
 8002d54:	4654      	mov	r4, sl
 8002d56:	2000      	movs	r0, #0
 8002d58:	f04f 0c0a 	mov.w	ip, #10
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d62:	3b30      	subs	r3, #48	; 0x30
 8002d64:	2b09      	cmp	r3, #9
 8002d66:	d94d      	bls.n	8002e04 <_svfiprintf_r+0x17c>
 8002d68:	b1b0      	cbz	r0, 8002d98 <_svfiprintf_r+0x110>
 8002d6a:	9207      	str	r2, [sp, #28]
 8002d6c:	e014      	b.n	8002d98 <_svfiprintf_r+0x110>
 8002d6e:	eba0 0308 	sub.w	r3, r0, r8
 8002d72:	fa09 f303 	lsl.w	r3, r9, r3
 8002d76:	4313      	orrs	r3, r2
 8002d78:	9304      	str	r3, [sp, #16]
 8002d7a:	46a2      	mov	sl, r4
 8002d7c:	e7d2      	b.n	8002d24 <_svfiprintf_r+0x9c>
 8002d7e:	9b03      	ldr	r3, [sp, #12]
 8002d80:	1d19      	adds	r1, r3, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	9103      	str	r1, [sp, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bfbb      	ittet	lt
 8002d8a:	425b      	neglt	r3, r3
 8002d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8002d90:	9307      	strge	r3, [sp, #28]
 8002d92:	9307      	strlt	r3, [sp, #28]
 8002d94:	bfb8      	it	lt
 8002d96:	9204      	strlt	r2, [sp, #16]
 8002d98:	7823      	ldrb	r3, [r4, #0]
 8002d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d9c:	d10c      	bne.n	8002db8 <_svfiprintf_r+0x130>
 8002d9e:	7863      	ldrb	r3, [r4, #1]
 8002da0:	2b2a      	cmp	r3, #42	; 0x2a
 8002da2:	d134      	bne.n	8002e0e <_svfiprintf_r+0x186>
 8002da4:	9b03      	ldr	r3, [sp, #12]
 8002da6:	1d1a      	adds	r2, r3, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	9203      	str	r2, [sp, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bfb8      	it	lt
 8002db0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002db4:	3402      	adds	r4, #2
 8002db6:	9305      	str	r3, [sp, #20]
 8002db8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002e80 <_svfiprintf_r+0x1f8>
 8002dbc:	7821      	ldrb	r1, [r4, #0]
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	4650      	mov	r0, sl
 8002dc2:	f7fd fa15 	bl	80001f0 <memchr>
 8002dc6:	b138      	cbz	r0, 8002dd8 <_svfiprintf_r+0x150>
 8002dc8:	9b04      	ldr	r3, [sp, #16]
 8002dca:	eba0 000a 	sub.w	r0, r0, sl
 8002dce:	2240      	movs	r2, #64	; 0x40
 8002dd0:	4082      	lsls	r2, r0
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	3401      	adds	r4, #1
 8002dd6:	9304      	str	r3, [sp, #16]
 8002dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ddc:	4825      	ldr	r0, [pc, #148]	; (8002e74 <_svfiprintf_r+0x1ec>)
 8002dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002de2:	2206      	movs	r2, #6
 8002de4:	f7fd fa04 	bl	80001f0 <memchr>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d038      	beq.n	8002e5e <_svfiprintf_r+0x1d6>
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <_svfiprintf_r+0x1f0>)
 8002dee:	bb1b      	cbnz	r3, 8002e38 <_svfiprintf_r+0x1b0>
 8002df0:	9b03      	ldr	r3, [sp, #12]
 8002df2:	3307      	adds	r3, #7
 8002df4:	f023 0307 	bic.w	r3, r3, #7
 8002df8:	3308      	adds	r3, #8
 8002dfa:	9303      	str	r3, [sp, #12]
 8002dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dfe:	4433      	add	r3, r6
 8002e00:	9309      	str	r3, [sp, #36]	; 0x24
 8002e02:	e768      	b.n	8002cd6 <_svfiprintf_r+0x4e>
 8002e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e08:	460c      	mov	r4, r1
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e7a6      	b.n	8002d5c <_svfiprintf_r+0xd4>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	3401      	adds	r4, #1
 8002e12:	9305      	str	r3, [sp, #20]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f04f 0c0a 	mov.w	ip, #10
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e20:	3a30      	subs	r2, #48	; 0x30
 8002e22:	2a09      	cmp	r2, #9
 8002e24:	d903      	bls.n	8002e2e <_svfiprintf_r+0x1a6>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0c6      	beq.n	8002db8 <_svfiprintf_r+0x130>
 8002e2a:	9105      	str	r1, [sp, #20]
 8002e2c:	e7c4      	b.n	8002db8 <_svfiprintf_r+0x130>
 8002e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e32:	4604      	mov	r4, r0
 8002e34:	2301      	movs	r3, #1
 8002e36:	e7f0      	b.n	8002e1a <_svfiprintf_r+0x192>
 8002e38:	ab03      	add	r3, sp, #12
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	462a      	mov	r2, r5
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <_svfiprintf_r+0x1f4>)
 8002e40:	a904      	add	r1, sp, #16
 8002e42:	4638      	mov	r0, r7
 8002e44:	f3af 8000 	nop.w
 8002e48:	1c42      	adds	r2, r0, #1
 8002e4a:	4606      	mov	r6, r0
 8002e4c:	d1d6      	bne.n	8002dfc <_svfiprintf_r+0x174>
 8002e4e:	89ab      	ldrh	r3, [r5, #12]
 8002e50:	065b      	lsls	r3, r3, #25
 8002e52:	f53f af2d 	bmi.w	8002cb0 <_svfiprintf_r+0x28>
 8002e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e58:	b01d      	add	sp, #116	; 0x74
 8002e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5e:	ab03      	add	r3, sp, #12
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	462a      	mov	r2, r5
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <_svfiprintf_r+0x1f4>)
 8002e66:	a904      	add	r1, sp, #16
 8002e68:	4638      	mov	r0, r7
 8002e6a:	f000 f879 	bl	8002f60 <_printf_i>
 8002e6e:	e7eb      	b.n	8002e48 <_svfiprintf_r+0x1c0>
 8002e70:	080032f0 	.word	0x080032f0
 8002e74:	080032fa 	.word	0x080032fa
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	08002bd5 	.word	0x08002bd5
 8002e80:	080032f6 	.word	0x080032f6

08002e84 <_printf_common>:
 8002e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e88:	4616      	mov	r6, r2
 8002e8a:	4699      	mov	r9, r3
 8002e8c:	688a      	ldr	r2, [r1, #8]
 8002e8e:	690b      	ldr	r3, [r1, #16]
 8002e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bfb8      	it	lt
 8002e98:	4613      	movlt	r3, r2
 8002e9a:	6033      	str	r3, [r6, #0]
 8002e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ea0:	4607      	mov	r7, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	b10a      	cbz	r2, 8002eaa <_printf_common+0x26>
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	6033      	str	r3, [r6, #0]
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	0699      	lsls	r1, r3, #26
 8002eae:	bf42      	ittt	mi
 8002eb0:	6833      	ldrmi	r3, [r6, #0]
 8002eb2:	3302      	addmi	r3, #2
 8002eb4:	6033      	strmi	r3, [r6, #0]
 8002eb6:	6825      	ldr	r5, [r4, #0]
 8002eb8:	f015 0506 	ands.w	r5, r5, #6
 8002ebc:	d106      	bne.n	8002ecc <_printf_common+0x48>
 8002ebe:	f104 0a19 	add.w	sl, r4, #25
 8002ec2:	68e3      	ldr	r3, [r4, #12]
 8002ec4:	6832      	ldr	r2, [r6, #0]
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	42ab      	cmp	r3, r5
 8002eca:	dc26      	bgt.n	8002f1a <_printf_common+0x96>
 8002ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ed0:	1e13      	subs	r3, r2, #0
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	bf18      	it	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	0692      	lsls	r2, r2, #26
 8002eda:	d42b      	bmi.n	8002f34 <_printf_common+0xb0>
 8002edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	47c0      	blx	r8
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d01e      	beq.n	8002f28 <_printf_common+0xa4>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	6922      	ldr	r2, [r4, #16]
 8002eee:	f003 0306 	and.w	r3, r3, #6
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf02      	ittt	eq
 8002ef6:	68e5      	ldreq	r5, [r4, #12]
 8002ef8:	6833      	ldreq	r3, [r6, #0]
 8002efa:	1aed      	subeq	r5, r5, r3
 8002efc:	68a3      	ldr	r3, [r4, #8]
 8002efe:	bf0c      	ite	eq
 8002f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f04:	2500      	movne	r5, #0
 8002f06:	4293      	cmp	r3, r2
 8002f08:	bfc4      	itt	gt
 8002f0a:	1a9b      	subgt	r3, r3, r2
 8002f0c:	18ed      	addgt	r5, r5, r3
 8002f0e:	2600      	movs	r6, #0
 8002f10:	341a      	adds	r4, #26
 8002f12:	42b5      	cmp	r5, r6
 8002f14:	d11a      	bne.n	8002f4c <_printf_common+0xc8>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e008      	b.n	8002f2c <_printf_common+0xa8>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4652      	mov	r2, sl
 8002f1e:	4649      	mov	r1, r9
 8002f20:	4638      	mov	r0, r7
 8002f22:	47c0      	blx	r8
 8002f24:	3001      	adds	r0, #1
 8002f26:	d103      	bne.n	8002f30 <_printf_common+0xac>
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f30:	3501      	adds	r5, #1
 8002f32:	e7c6      	b.n	8002ec2 <_printf_common+0x3e>
 8002f34:	18e1      	adds	r1, r4, r3
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	2030      	movs	r0, #48	; 0x30
 8002f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f3e:	4422      	add	r2, r4
 8002f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f48:	3302      	adds	r3, #2
 8002f4a:	e7c7      	b.n	8002edc <_printf_common+0x58>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4622      	mov	r2, r4
 8002f50:	4649      	mov	r1, r9
 8002f52:	4638      	mov	r0, r7
 8002f54:	47c0      	blx	r8
 8002f56:	3001      	adds	r0, #1
 8002f58:	d0e6      	beq.n	8002f28 <_printf_common+0xa4>
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7d9      	b.n	8002f12 <_printf_common+0x8e>
	...

08002f60 <_printf_i>:
 8002f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	7e0f      	ldrb	r7, [r1, #24]
 8002f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f68:	2f78      	cmp	r7, #120	; 0x78
 8002f6a:	4691      	mov	r9, r2
 8002f6c:	4680      	mov	r8, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	469a      	mov	sl, r3
 8002f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f76:	d807      	bhi.n	8002f88 <_printf_i+0x28>
 8002f78:	2f62      	cmp	r7, #98	; 0x62
 8002f7a:	d80a      	bhi.n	8002f92 <_printf_i+0x32>
 8002f7c:	2f00      	cmp	r7, #0
 8002f7e:	f000 80d4 	beq.w	800312a <_printf_i+0x1ca>
 8002f82:	2f58      	cmp	r7, #88	; 0x58
 8002f84:	f000 80c0 	beq.w	8003108 <_printf_i+0x1a8>
 8002f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f90:	e03a      	b.n	8003008 <_printf_i+0xa8>
 8002f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f96:	2b15      	cmp	r3, #21
 8002f98:	d8f6      	bhi.n	8002f88 <_printf_i+0x28>
 8002f9a:	a101      	add	r1, pc, #4	; (adr r1, 8002fa0 <_printf_i+0x40>)
 8002f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fa0:	08002ff9 	.word	0x08002ff9
 8002fa4:	0800300d 	.word	0x0800300d
 8002fa8:	08002f89 	.word	0x08002f89
 8002fac:	08002f89 	.word	0x08002f89
 8002fb0:	08002f89 	.word	0x08002f89
 8002fb4:	08002f89 	.word	0x08002f89
 8002fb8:	0800300d 	.word	0x0800300d
 8002fbc:	08002f89 	.word	0x08002f89
 8002fc0:	08002f89 	.word	0x08002f89
 8002fc4:	08002f89 	.word	0x08002f89
 8002fc8:	08002f89 	.word	0x08002f89
 8002fcc:	08003111 	.word	0x08003111
 8002fd0:	08003039 	.word	0x08003039
 8002fd4:	080030cb 	.word	0x080030cb
 8002fd8:	08002f89 	.word	0x08002f89
 8002fdc:	08002f89 	.word	0x08002f89
 8002fe0:	08003133 	.word	0x08003133
 8002fe4:	08002f89 	.word	0x08002f89
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	08002f89 	.word	0x08002f89
 8002ff0:	08002f89 	.word	0x08002f89
 8002ff4:	080030d3 	.word	0x080030d3
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	602a      	str	r2, [r5, #0]
 8003000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003008:	2301      	movs	r3, #1
 800300a:	e09f      	b.n	800314c <_printf_i+0x1ec>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	682b      	ldr	r3, [r5, #0]
 8003010:	0607      	lsls	r7, r0, #24
 8003012:	f103 0104 	add.w	r1, r3, #4
 8003016:	6029      	str	r1, [r5, #0]
 8003018:	d501      	bpl.n	800301e <_printf_i+0xbe>
 800301a:	681e      	ldr	r6, [r3, #0]
 800301c:	e003      	b.n	8003026 <_printf_i+0xc6>
 800301e:	0646      	lsls	r6, r0, #25
 8003020:	d5fb      	bpl.n	800301a <_printf_i+0xba>
 8003022:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003026:	2e00      	cmp	r6, #0
 8003028:	da03      	bge.n	8003032 <_printf_i+0xd2>
 800302a:	232d      	movs	r3, #45	; 0x2d
 800302c:	4276      	negs	r6, r6
 800302e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003032:	485a      	ldr	r0, [pc, #360]	; (800319c <_printf_i+0x23c>)
 8003034:	230a      	movs	r3, #10
 8003036:	e012      	b.n	800305e <_printf_i+0xfe>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	1d19      	adds	r1, r3, #4
 800303e:	6029      	str	r1, [r5, #0]
 8003040:	0605      	lsls	r5, r0, #24
 8003042:	d501      	bpl.n	8003048 <_printf_i+0xe8>
 8003044:	681e      	ldr	r6, [r3, #0]
 8003046:	e002      	b.n	800304e <_printf_i+0xee>
 8003048:	0641      	lsls	r1, r0, #25
 800304a:	d5fb      	bpl.n	8003044 <_printf_i+0xe4>
 800304c:	881e      	ldrh	r6, [r3, #0]
 800304e:	4853      	ldr	r0, [pc, #332]	; (800319c <_printf_i+0x23c>)
 8003050:	2f6f      	cmp	r7, #111	; 0x6f
 8003052:	bf0c      	ite	eq
 8003054:	2308      	moveq	r3, #8
 8003056:	230a      	movne	r3, #10
 8003058:	2100      	movs	r1, #0
 800305a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800305e:	6865      	ldr	r5, [r4, #4]
 8003060:	60a5      	str	r5, [r4, #8]
 8003062:	2d00      	cmp	r5, #0
 8003064:	bfa2      	ittt	ge
 8003066:	6821      	ldrge	r1, [r4, #0]
 8003068:	f021 0104 	bicge.w	r1, r1, #4
 800306c:	6021      	strge	r1, [r4, #0]
 800306e:	b90e      	cbnz	r6, 8003074 <_printf_i+0x114>
 8003070:	2d00      	cmp	r5, #0
 8003072:	d04b      	beq.n	800310c <_printf_i+0x1ac>
 8003074:	4615      	mov	r5, r2
 8003076:	fbb6 f1f3 	udiv	r1, r6, r3
 800307a:	fb03 6711 	mls	r7, r3, r1, r6
 800307e:	5dc7      	ldrb	r7, [r0, r7]
 8003080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003084:	4637      	mov	r7, r6
 8003086:	42bb      	cmp	r3, r7
 8003088:	460e      	mov	r6, r1
 800308a:	d9f4      	bls.n	8003076 <_printf_i+0x116>
 800308c:	2b08      	cmp	r3, #8
 800308e:	d10b      	bne.n	80030a8 <_printf_i+0x148>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	07de      	lsls	r6, r3, #31
 8003094:	d508      	bpl.n	80030a8 <_printf_i+0x148>
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	6861      	ldr	r1, [r4, #4]
 800309a:	4299      	cmp	r1, r3
 800309c:	bfde      	ittt	le
 800309e:	2330      	movle	r3, #48	; 0x30
 80030a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030a8:	1b52      	subs	r2, r2, r5
 80030aa:	6122      	str	r2, [r4, #16]
 80030ac:	f8cd a000 	str.w	sl, [sp]
 80030b0:	464b      	mov	r3, r9
 80030b2:	aa03      	add	r2, sp, #12
 80030b4:	4621      	mov	r1, r4
 80030b6:	4640      	mov	r0, r8
 80030b8:	f7ff fee4 	bl	8002e84 <_printf_common>
 80030bc:	3001      	adds	r0, #1
 80030be:	d14a      	bne.n	8003156 <_printf_i+0x1f6>
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	b004      	add	sp, #16
 80030c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	f043 0320 	orr.w	r3, r3, #32
 80030d0:	6023      	str	r3, [r4, #0]
 80030d2:	4833      	ldr	r0, [pc, #204]	; (80031a0 <_printf_i+0x240>)
 80030d4:	2778      	movs	r7, #120	; 0x78
 80030d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	6829      	ldr	r1, [r5, #0]
 80030de:	061f      	lsls	r7, r3, #24
 80030e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80030e4:	d402      	bmi.n	80030ec <_printf_i+0x18c>
 80030e6:	065f      	lsls	r7, r3, #25
 80030e8:	bf48      	it	mi
 80030ea:	b2b6      	uxthmi	r6, r6
 80030ec:	07df      	lsls	r7, r3, #31
 80030ee:	bf48      	it	mi
 80030f0:	f043 0320 	orrmi.w	r3, r3, #32
 80030f4:	6029      	str	r1, [r5, #0]
 80030f6:	bf48      	it	mi
 80030f8:	6023      	strmi	r3, [r4, #0]
 80030fa:	b91e      	cbnz	r6, 8003104 <_printf_i+0x1a4>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	f023 0320 	bic.w	r3, r3, #32
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	2310      	movs	r3, #16
 8003106:	e7a7      	b.n	8003058 <_printf_i+0xf8>
 8003108:	4824      	ldr	r0, [pc, #144]	; (800319c <_printf_i+0x23c>)
 800310a:	e7e4      	b.n	80030d6 <_printf_i+0x176>
 800310c:	4615      	mov	r5, r2
 800310e:	e7bd      	b.n	800308c <_printf_i+0x12c>
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	6826      	ldr	r6, [r4, #0]
 8003114:	6961      	ldr	r1, [r4, #20]
 8003116:	1d18      	adds	r0, r3, #4
 8003118:	6028      	str	r0, [r5, #0]
 800311a:	0635      	lsls	r5, r6, #24
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	d501      	bpl.n	8003124 <_printf_i+0x1c4>
 8003120:	6019      	str	r1, [r3, #0]
 8003122:	e002      	b.n	800312a <_printf_i+0x1ca>
 8003124:	0670      	lsls	r0, r6, #25
 8003126:	d5fb      	bpl.n	8003120 <_printf_i+0x1c0>
 8003128:	8019      	strh	r1, [r3, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	6123      	str	r3, [r4, #16]
 800312e:	4615      	mov	r5, r2
 8003130:	e7bc      	b.n	80030ac <_printf_i+0x14c>
 8003132:	682b      	ldr	r3, [r5, #0]
 8003134:	1d1a      	adds	r2, r3, #4
 8003136:	602a      	str	r2, [r5, #0]
 8003138:	681d      	ldr	r5, [r3, #0]
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	2100      	movs	r1, #0
 800313e:	4628      	mov	r0, r5
 8003140:	f7fd f856 	bl	80001f0 <memchr>
 8003144:	b108      	cbz	r0, 800314a <_printf_i+0x1ea>
 8003146:	1b40      	subs	r0, r0, r5
 8003148:	6060      	str	r0, [r4, #4]
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	6123      	str	r3, [r4, #16]
 800314e:	2300      	movs	r3, #0
 8003150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003154:	e7aa      	b.n	80030ac <_printf_i+0x14c>
 8003156:	6923      	ldr	r3, [r4, #16]
 8003158:	462a      	mov	r2, r5
 800315a:	4649      	mov	r1, r9
 800315c:	4640      	mov	r0, r8
 800315e:	47d0      	blx	sl
 8003160:	3001      	adds	r0, #1
 8003162:	d0ad      	beq.n	80030c0 <_printf_i+0x160>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	079b      	lsls	r3, r3, #30
 8003168:	d413      	bmi.n	8003192 <_printf_i+0x232>
 800316a:	68e0      	ldr	r0, [r4, #12]
 800316c:	9b03      	ldr	r3, [sp, #12]
 800316e:	4298      	cmp	r0, r3
 8003170:	bfb8      	it	lt
 8003172:	4618      	movlt	r0, r3
 8003174:	e7a6      	b.n	80030c4 <_printf_i+0x164>
 8003176:	2301      	movs	r3, #1
 8003178:	4632      	mov	r2, r6
 800317a:	4649      	mov	r1, r9
 800317c:	4640      	mov	r0, r8
 800317e:	47d0      	blx	sl
 8003180:	3001      	adds	r0, #1
 8003182:	d09d      	beq.n	80030c0 <_printf_i+0x160>
 8003184:	3501      	adds	r5, #1
 8003186:	68e3      	ldr	r3, [r4, #12]
 8003188:	9903      	ldr	r1, [sp, #12]
 800318a:	1a5b      	subs	r3, r3, r1
 800318c:	42ab      	cmp	r3, r5
 800318e:	dcf2      	bgt.n	8003176 <_printf_i+0x216>
 8003190:	e7eb      	b.n	800316a <_printf_i+0x20a>
 8003192:	2500      	movs	r5, #0
 8003194:	f104 0619 	add.w	r6, r4, #25
 8003198:	e7f5      	b.n	8003186 <_printf_i+0x226>
 800319a:	bf00      	nop
 800319c:	08003301 	.word	0x08003301
 80031a0:	08003312 	.word	0x08003312

080031a4 <memmove>:
 80031a4:	4288      	cmp	r0, r1
 80031a6:	b510      	push	{r4, lr}
 80031a8:	eb01 0402 	add.w	r4, r1, r2
 80031ac:	d902      	bls.n	80031b4 <memmove+0x10>
 80031ae:	4284      	cmp	r4, r0
 80031b0:	4623      	mov	r3, r4
 80031b2:	d807      	bhi.n	80031c4 <memmove+0x20>
 80031b4:	1e43      	subs	r3, r0, #1
 80031b6:	42a1      	cmp	r1, r4
 80031b8:	d008      	beq.n	80031cc <memmove+0x28>
 80031ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031c2:	e7f8      	b.n	80031b6 <memmove+0x12>
 80031c4:	4402      	add	r2, r0
 80031c6:	4601      	mov	r1, r0
 80031c8:	428a      	cmp	r2, r1
 80031ca:	d100      	bne.n	80031ce <memmove+0x2a>
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031d6:	e7f7      	b.n	80031c8 <memmove+0x24>

080031d8 <_sbrk_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4d06      	ldr	r5, [pc, #24]	; (80031f4 <_sbrk_r+0x1c>)
 80031dc:	2300      	movs	r3, #0
 80031de:	4604      	mov	r4, r0
 80031e0:	4608      	mov	r0, r1
 80031e2:	602b      	str	r3, [r5, #0]
 80031e4:	f7fd fc1c 	bl	8000a20 <_sbrk>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d102      	bne.n	80031f2 <_sbrk_r+0x1a>
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	b103      	cbz	r3, 80031f2 <_sbrk_r+0x1a>
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	20000244 	.word	0x20000244

080031f8 <memcpy>:
 80031f8:	440a      	add	r2, r1
 80031fa:	4291      	cmp	r1, r2
 80031fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003200:	d100      	bne.n	8003204 <memcpy+0xc>
 8003202:	4770      	bx	lr
 8003204:	b510      	push	{r4, lr}
 8003206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800320a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800320e:	4291      	cmp	r1, r2
 8003210:	d1f9      	bne.n	8003206 <memcpy+0xe>
 8003212:	bd10      	pop	{r4, pc}

08003214 <_realloc_r>:
 8003214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003218:	4680      	mov	r8, r0
 800321a:	4614      	mov	r4, r2
 800321c:	460e      	mov	r6, r1
 800321e:	b921      	cbnz	r1, 800322a <_realloc_r+0x16>
 8003220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003224:	4611      	mov	r1, r2
 8003226:	f7ff bc49 	b.w	8002abc <_malloc_r>
 800322a:	b92a      	cbnz	r2, 8003238 <_realloc_r+0x24>
 800322c:	f7ff fbda 	bl	80029e4 <_free_r>
 8003230:	4625      	mov	r5, r4
 8003232:	4628      	mov	r0, r5
 8003234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003238:	f000 f81b 	bl	8003272 <_malloc_usable_size_r>
 800323c:	4284      	cmp	r4, r0
 800323e:	4607      	mov	r7, r0
 8003240:	d802      	bhi.n	8003248 <_realloc_r+0x34>
 8003242:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003246:	d812      	bhi.n	800326e <_realloc_r+0x5a>
 8003248:	4621      	mov	r1, r4
 800324a:	4640      	mov	r0, r8
 800324c:	f7ff fc36 	bl	8002abc <_malloc_r>
 8003250:	4605      	mov	r5, r0
 8003252:	2800      	cmp	r0, #0
 8003254:	d0ed      	beq.n	8003232 <_realloc_r+0x1e>
 8003256:	42bc      	cmp	r4, r7
 8003258:	4622      	mov	r2, r4
 800325a:	4631      	mov	r1, r6
 800325c:	bf28      	it	cs
 800325e:	463a      	movcs	r2, r7
 8003260:	f7ff ffca 	bl	80031f8 <memcpy>
 8003264:	4631      	mov	r1, r6
 8003266:	4640      	mov	r0, r8
 8003268:	f7ff fbbc 	bl	80029e4 <_free_r>
 800326c:	e7e1      	b.n	8003232 <_realloc_r+0x1e>
 800326e:	4635      	mov	r5, r6
 8003270:	e7df      	b.n	8003232 <_realloc_r+0x1e>

08003272 <_malloc_usable_size_r>:
 8003272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003276:	1f18      	subs	r0, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	bfbc      	itt	lt
 800327c:	580b      	ldrlt	r3, [r1, r0]
 800327e:	18c0      	addlt	r0, r0, r3
 8003280:	4770      	bx	lr
	...

08003284 <_init>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr

08003290 <_fini>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr
